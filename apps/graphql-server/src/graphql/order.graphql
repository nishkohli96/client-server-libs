scalar DateTimeISO
scalar UUID

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentOption {
  CARD
  PAYPAL
}

type CreditCard {
  type: PaymentOption!
  cardNumber: String!
  expiryDate: String!
}

type PayPal {
  type: PaymentOption!
  email: EmailAddress!
}

union PaymentMethod = CreditCard | PayPal

type Order {
  id: UUID!
  customerId: ObjectID!
  productIds: [ID!]!
  totalAmount: Float!
  status: OrderStatus!
  payment: PaymentMethod!
  createdAt: DateTimeISO!
}

input OrderInput {
  customerId: ObjectID!
  productIds: [ID!]!
  paymentMethod: PaymentMethod!
  amount: Float!
}

type Query {
  getOrders(customerId: ObjectID!): [Order!]!
  getOrderById(orderId: UUID!): Order
}

type Mutation {
  placeOrder(input: OrderInput!): Order!
}

type Subscription {
  orderUpdated(orderId: ID!): Order!
}
