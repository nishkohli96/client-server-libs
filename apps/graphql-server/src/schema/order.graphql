scalar DateTimeISO
scalar UUID

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentOption {
  CARD
  PAYPAL
}

type CreditCard {
  type: PaymentOption!
  cardNumber: String!
  expiryDate: String!
}

input CreditCardInput {
  type: PaymentOption!
  cardNumber: String!
  expiryDate: String!
}

type PayPal {
  type: PaymentOption!
  email: EmailAddress!
}

input PayPalInput {
  type: PaymentOption!
  email: EmailAddress!
}

input PaymentMethodInput {
  card: CreditCardInput
  paypal: PayPalInput
}

input OrderInput {
  customerId: ObjectID!
  productIds: [ID!]!
  paymentMethod: PaymentMethodInput!
  amount: Float!
}

"Either via Paypal or Credit Card"
union PaymentMethod = CreditCard | PayPal

type Order {
  id: UUID!
  customerId: ObjectID!
  productIds: [ID!]!
  totalAmount: Float!
  status: OrderStatus!
  payment: PaymentMethod!
  createdAt: DateTimeISO!
}

type Query {
  getOrders: [Order!]!
  getOrderById(orderId: UUID!): Order
  getCustomerOrders(customerId: ObjectID!): [Order!]!
}

type Mutation {
  placeOrder(input: OrderInput!): Order!
}

type Subscription {
  orderUpdated(orderId: ID!): Order!
}
